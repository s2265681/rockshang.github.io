(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{352:function(t,s,a){"use strict";a.r(s);var e=a(16),r=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"_4、正则的扩展"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、正则的扩展"}},[t._v("#")]),t._v(" 4、正则的扩展")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#one"}},[t._v(" 1、RegExp 构造函数")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#two"}},[t._v(" 2、字符串的正则方法")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#three"}},[t._v(" 3、RegExp 新增属性")])])]),t._v(" "),a("hr"),t._v(" "),a("h4",{attrs:{id:"一、regexp-构造函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、regexp-构造函数"}},[t._v("#")]),t._v(" "),a("a",{attrs:{name:"one"}},[t._v("一、RegExp 构造函数")])]),t._v(" "),a("p",[t._v("在 ES5 中正则表达式的创建有两种方式")]),t._v(" "),a("ul",[a("li",[t._v("构造函数，new RegExp('xyz','i'); 第一个参数是字符串，第二个参数是修饰符。")]),t._v(" "),a("li",[t._v("第二种直接等于表达式的方式/xyz/i")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RegExp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'xyz'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'i'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/xyz/i")]),t._v("\n")])])]),a("p",[t._v("在 ES5 中如果构造函数的第一个参数用表达式，第二个参数用修饰符会报错。")]),t._v(" "),a("p",[t._v("在 ES6 中修改了这种情况，不会报错，而且第二个参数会覆盖表达式中的修饰符。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RegExp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/xyz/gi")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"i"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("flags"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// i")]),t._v("\n")])])]),a("p",[t._v("上面代码中，原有正则对象的修饰符是"),a("code",[t._v("ig")]),t._v("，它会被第二个参数"),a("code",[t._v("i")]),t._v("覆盖。")]),t._v(" "),a("h4",{attrs:{id:"二、字符串的正则方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、字符串的正则方法"}},[t._v("#")]),t._v(" "),a("a",{attrs:{name:"two"}},[t._v("二、字符串的正则方法")])]),t._v(" "),a("p",[t._v("字符串对象共有 4 个方法，可以使用正则表达式：match() 、 replace() 、search() 、 和 split()")]),t._v(" "),a("p",[t._v("ES6 中语言内部全部调用 RegExp 的实例方法")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("String.prototype.match")]),t._v(" 调用 "),a("code",[t._v("RegExp.prototype[Symbol.match]")])]),t._v(" "),a("li",[a("code",[t._v("String.prototype.replace")]),t._v(" 调用 "),a("code",[t._v("RegExp.prototype[Symbol.replace]")])]),t._v(" "),a("li",[a("code",[t._v("String.prototype.search")]),t._v(" 调用 "),a("code",[t._v("RegExp.prototype[Symbol.search]")])]),t._v(" "),a("li",[a("code",[t._v("String.prototype.split")]),t._v(" 调用 "),a("code",[t._v("RegExp.prototype[Symbol.split]")])])]),t._v(" "),a("p",[t._v("ES2020 新增 String.prototype.matchAll() 可以一次性取出所有匹配。不过，它返回的是一个遍历器（Iterator），而不是数组。")]),t._v(" "),a("p",[t._v("遍历器的好处是，如果数组很大，遍历器比较节省资源。")]),t._v(" "),a("p",[t._v("遍历器转化成数组也是比较简单的，可以用 for...of 遍历，可以通过"),a("code",[t._v("Array.from")]),t._v(" 或者"),a("code",[t._v("...")]),t._v("运算符转化成数组。")]),t._v(" "),a("p",[t._v("...")]),t._v(" "),a("p",[t._v("ES5 中想要全部匹配需要遍历，不太方便")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"美死了！美女"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" reg "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/美/g")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nreg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\nreg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastIndex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\nreg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\nreg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastIndex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 5")]),t._v("\nreg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\nreg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastIndex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\n")])])]),a("p",[t._v("ES6 中字符串新增了 matchAll,返回一个 Iterator 的遍历器，很容易可以得到里面的值")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'美死了！美女'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" reg "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/美/g")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("matchAll")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nresult "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// RegExpStringIterator {}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [Array(1), Array(1)]")]),t._v("\n或者\nArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("from")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [Array(1), Array(1)]")]),t._v("\n")])])]),a("h4",{attrs:{id:"三、regexp-新增属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、regexp-新增属性"}},[t._v("#")]),t._v(" "),a("a",{attrs:{name:"three"}},[t._v(" 三、RegExp 新增属性")])]),t._v(" "),a("ul",[a("li",[t._v("RegExp.prototype.flags 属性， ES6 为正则表达式新增了"),a("code",[t._v("flags")]),t._v("属性，会返回正则表达式的修饰符。")]),t._v(" "),a("li",[t._v("新增了 y 修饰符(sticky),和 RegExp.prototype.sticky 属性")]),t._v(" "),a("li",[t._v("为 exec 新增正则匹配索引")])])])}),[],!1,null,null,null);s.default=r.exports}}]);