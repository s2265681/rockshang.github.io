(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{429:function(t,s,a){"use strict";a.r(s);var n=a(44),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"_6、数据类型与隐式转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6、数据类型与隐式转换"}},[t._v("#")]),t._v(" 6、数据类型与隐式转换")]),t._v(" "),a("h2",{attrs:{id:"_1-数据类型分类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-数据类型分类"}},[t._v("#")]),t._v(" 1.数据类型分类")]),t._v(" "),a("p",[t._v("（1）基本数据类型【7】")]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("string、 number、null、undefined、  boolean、bigInt、symbol")])])]),t._v(" "),a("p",[t._v("注意⚠️：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("Number类型中"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),t._v("不是有效数字但是属于Number类型"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//=> 'number'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => false")]),t._v("\nObject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("is")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => true")]),t._v("\nBigInt出现的意思是保证超出最大最小安全值仍然可以准确计算\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("MAX_SAFE_INTEGER")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//=>9007199254740991")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("MIN_SAFE_INTEGER")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//=>-9007199254740991")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9007199254740991")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("n")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v("bigint类型的\n")])])]),a("p",[t._v("（2）引用数据类型【2】")]),t._v(" "),a("blockquote",[a("ul",[a("li",[a("strong",[t._v("object")]),t._v("\n- 普通对象 {} Map\n- 实例对象 new xxx\n- 日期对象 new Date\n- 正则对象 new RegExp\n- 原型对象 prototype\n- 数组对象 Set Array\n- 。。。")]),t._v(" "),a("li",[a("strong",[t._v("function")])])])]),t._v(" "),a("h2",{attrs:{id:"_2-数据类型的检测"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-数据类型的检测"}},[t._v("#")]),t._v(" 2.数据类型的检测")]),t._v(" "),a("blockquote",[a("ul",[a("li",[a("strong",[t._v("typeof")]),t._v("\n能检测基本类型和函数类型，但是对于对象类型和null不能区分（null为计算机历史遗留问题）\ntypeof function(){}  // 'function'\ntypeof NaN            // 'number'")]),t._v(" "),a("li",[a("strong",[t._v("constructor")]),t._v("\n[].constructor === Array")]),t._v(" "),a("li",[a("strong",[t._v("instanceof")])]),t._v(" "),a("li",[a("strong",[t._v("Object.prototype.toString.call()")]),t._v('\nObject.prototype.toString.call([])    // "[object Array]"')])])]),t._v(" "),a("h2",{attrs:{id:"_3-数据类型的隐式转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-数据类型的隐式转换"}},[t._v("#")]),t._v(" 3.数据类型的隐式转换")]),t._v(" "),a("p",[a("strong",[t._v("（1）转化为Number类型的情况")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("使用Number显式类型转换, 转换过程中，遇到对象会先toString然后在Number转换")]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("例子：")]),t._v("\nNumber()、Number(null)、Number(\"\")、Number(false) 结果为 0\nNumber(undefined) 、 Number({})、 Number('wds'), 结果为 NaN\nNumber(true) , 转化结果为 1\nNumber(['2222'])  结果为 2222\nNumber(['2222','1111'])  结果为NaN\nNumber('1,2')")])])]),t._v(" "),a("li",[a("p",[t._v("使用加号减号等运算符隐式转换, 转换过程中，遇到对象会先toString然后在Number转换")]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("例子：")]),t._v("\n+ '123' 结果为 123\n+ [] 、+null、+false   结果为 0\n+ {}、+ 'abc' 、+ undefined   结果为 NaN\n+ true  结果为 1\n1 + true   结果为 2\n注意⚠️： NaN + 任何数都是NaN、字符串和对象除外，会转成字符串拼接\nNaN+123、NaN+ true、NaN+NaN  结果都为NaN\nNaN + {}  结果为 \"NaN[object Object]\"\nNaN + []  结果为 \"NaN\"")])])]),t._v(" "),a("li",[a("p",[t._v("使用isNaN进行检测的时候，会隐式转换为数字在检测,,转换过程中，遇到对象会先toString然后在Number转换")]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("验证是不是无效数字，无效返回true")]),t._v(" "),a("strong",[t._v("例子：")]),t._v("\nisNaN(123) 、 isNaN('') 、isNaN('2222')  、 isNaN(false)、isNaN(true) 、isNaN(null) 、 isNaN([])\n结果为 false\n结果为true\n结果为false\nisNaN(undefined)、、 isNaN(NaN) 、")])])]),t._v(" "),a("li",[a("p",[t._v("使用parseInt、parseFloat转换")]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("先转成字符串，然后从左到右检测有效数字，如果没有检测到有效数字结果就为 NaN")]),t._v(" "),a("strong",[t._v("例子")]),t._v("：\nparseInt('112abc')   结果为  112\nparseInt('abc')、parseInt('abc22222')  结果为 NaN\nparseFloat('2.22'+'aa')   结果为 2.22\nparseFloat('2e'+'3')   结果为 2000 科学计数法例外")])])]),t._v(" "),a("li",[a("p",[t._v("在==比较的时候，有些值需要转换为数字再进行比较")]),t._v(" "),a("p",[a("em",[t._v("一道parseInt面试题")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" arr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10.18")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("14")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("35")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("23")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  arr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("parseInt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 解体思路")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 可以转化为arr.map((el,idx)=>parseInt(el,idx))")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回一个数组")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 元素分别求")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// parseInt(10.18,0)  => 10")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// parseInt(0,1)   => NaN  parseInt的进制范围是2～36， 1 不在该范围返回NaN")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// parseInt(14,2)  => 从左向右检测进制2，数字范围0～1，所以4没有，相当于1的2进制转化为10进制，1*2^0 = 1, 结果为1")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// parseInt(35,3)  => 因为3进制数字范围0~2, 3和5都不在这个范围，返回NaN")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// parseInt(23,4) => 2*4^1+3*4^0 = 11 ")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 结果为[10,NaN,1,NaN,11]")]),t._v("\n")])])])])]),t._v(" "),a("p",[a("strong",[t._v("（2）转化为String类型的情况")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("使用String或者toString显式类型转换")]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("例子")]),t._v('：\nString(123)  结果为"123"\nString(true) 结果为"true"\nString(undefined)     结果为"undefined"\nString([])     结果为""\nString({})     结果为"[object Object]"    * 会调用原型上的toString()方法\n注意⚠️：\n123.toString() 会报错，因为会解析成（123.）toString()， 正确写法 (123).toString() 或者 123..toString 或者123 .toString')])])]),t._v(" "),a("li",[a("p",[t._v("使用➕号连接的时候，如果一边有字符串或者有对象(会先调用toString()解析为字符串)，那么会进行字符串的拼接")]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("例子")]),t._v('：\n1 + \'hello\'  结果为 "1hello"\n1 + []         结果为 "1"\n1 + {}         结果为"1[object Object]"\nNaN + {}    结果为 "NaN[object Object]"')])])])]),t._v(" "),a("p",[a("strong",[t._v("（3）转化为Boolean")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("Boolean 强制转化")]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("例子")]),t._v("：\nBoolean(null)、Boolean(0) 、Boolean(“”)、Boolean(NaN)、Boolean(undefined) 结果为false\n除上面五个，其他值转换都为true\nBoolean('haha') 、Boolean([]) 、 Boolean({}) 、Boolean(1) 结果为true")])])]),t._v(" "),a("li",[a("p",[t._v("!、!! 隐式转换")]),t._v(" "),a("blockquote",[a("p",[t._v("！ 结果为Boolean的相反\n!!   结果为Boolean的值\n"),a("strong",[t._v("例子")]),t._v('：\n! null 、!"" 、 !undefined 、!NaN、!0  结果为true\n!!  undefined  结果为false')])])])]),t._v(" "),a("p",[a("strong",[t._v("（4）“==”的隐式转化")])]),t._v(" "),a("ul",[a("li",[t._v("两个 == 比较值，三个===号值和类型都比较\n"),a("blockquote",[a("p",[t._v("如果遇到对象会转换为字符串在比较\n例子\n[] == []   输出 false 对象比较对内存地址\nnull == undefined    输出true\n'123' == 123、'123' == [123] 、 '123' == ['123']  输出都是true")])])])]),t._v(" "),a("h2",{attrs:{id:"练习题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#练习题"}},[t._v("#")]),t._v(" 练习题")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出NaN")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出NaN")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"12px"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出12")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseFloat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1.6px"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1.2px"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出'2.6NaN'  1.6 + 1 + typeof NaN")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"12px"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出NaN")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0.8"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出0  0.8 => 0 => 0 => false => 0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isNaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 输出false "" => 0 =>false')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isNaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出false  null => 0 => false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isNaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"12px"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isNaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0.8"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出false isNaN(0)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isNaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("23")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'string'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出'booleantrue'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// typeof !(NaN) + !(isNaN(Number(null)))")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// typeof true + !(isNaN(0))   => 'boolean'+ true => 'booleantrue'")]),t._v("\n")])])]),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Test'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 12 + false => 12 + 0 => 12")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 12 + undefined => 12 + NaN => NaN")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// NaN + [] => NaN + Number([]) => NaN + Number([].toString()) => NaN + Number('') => NaN")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// NaN+'Test' => 'NaNTest'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'NaNTest'+null => 'NaNTestnull'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'NaNTestnull'+true => 'NaNTestnulltrue'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'NaNTestnulltrue'+ {} => 'NaNTestnulltrue'+ {}.toString() => 'NaNTestnulltrue[object Object]'")]),t._v("\n")])])]),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("# "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("JS")]),t._v("进阶（一）数据类型与隐式转换\n\n## "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),t._v("数据类型分类\n\n（"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("）基本数据类型【"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v("】\n\n   "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),t._v("string、 number、"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("、"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v("、  boolean、bigInt、symbol"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),t._v("\n\n注意⚠️：\n\n​"),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("js\nNumber类型中NaN不是有效数字但是属于Number类型,typeof NaN  //=> 'number'\nNaN === NaN  // => false\nObject.is(NaN,NaN)  // => true\nBigInt出现的意思是保证超出最大最小安全值仍然可以准确计算\nconsole.log(Number.MAX_SAFE_INTEGER); //=>9007199254740991\nconsole.log(Number.MIN_SAFE_INTEGER); //=>-9007199254740991\n9007199254740991n  =>bigint类型的\n​")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v("\n\n （"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("）引用数据类型【"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("】\n\n   "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),t._v("object"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" 普通对象 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" Map\n   "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" 实例对象 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("xxx")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" 日期对象 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Date")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" 正则对象 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RegExp")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" 原型对象 prototype\n   "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" 数组对象 Set Array\n   "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" 。。。\n   "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),t._v("\n\n##  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.")]),t._v("数据类型的检测\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("   能检测基本类型和函数类型，但是对于对象类型和"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("不能区分（"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("为计算机历史遗留问题）\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'function'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),t._v("            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'number'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),t._v("constructor"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constructor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" Array\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("       "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "[object Array]"')]),t._v("\n\n\n\n##  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.")]),t._v("数据类型的隐式转换\n\n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),t._v("（"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("）转化为Number类型的情况"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" 使用Number显式类型转换"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" 转换过程中，遇到对象会先toString然后在Number转换\n\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),t._v("例子："),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("、Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("、Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("、Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 结果为 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 、 "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("、 "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'wds'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" 结果为 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" 转化结果为 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" \n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'2222'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  结果为 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2222")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'2222'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1111'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  结果为"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1,2'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" 使用加号减号等运算符隐式转换"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" 转换过程中，遇到对象会先toString然后在Number转换\n\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),t._v("例子："),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'123'")]),t._v(" 结果为 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" 、"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("、"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("   结果为 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("、"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abc'")]),t._v(" 、"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v("   结果为 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("  结果为 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("   结果为 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("    注意⚠️： "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" 任何数都是"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),t._v("、字符串和对象除外，会转成字符串拼接\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),t._v("、"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("、"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),t._v("  结果都为"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("  结果为 "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"NaN[object Object]"')]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("  结果为 "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"NaN"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" 使用isNaN进行检测的时候，会隐式转换为数字在检测"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("转换过程中，遇到对象会先toString然后在Number转换\n\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),t._v("验证是不是无效数字，无效返回"),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),t._v("例子："),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isNaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 、 "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isNaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("、isNaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'2222'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  、 "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isNaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("、isNaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("、isNaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 、 "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isNaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" 结果为 "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" 结果为"),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" 结果为"),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isNaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("、、 "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isNaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 、\n\n    \n\n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" 使用parseInt、parseFloat转换 \n\n   "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),t._v("先转成字符串，然后从左到右检测有效数字，如果没有检测到有效数字结果就为 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),t._v("例子"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),t._v("：\n   "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'112abc'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   结果为  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("112")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abc'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("、parseInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abc22222'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  结果为 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseFloat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'2.22'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'aa'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   结果为 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.22")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseFloat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'2e'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'3'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   结果为 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2000")]),t._v(" 科学计数法例外\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" 在"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v("比较的时候，有些值需要转换为数字再进行比较\n\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("一道parseInt面试题"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v("`js\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" arr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10.18")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("14")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("35")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("23")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    arr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("parseInt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 解体思路")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 可以转化为arr.map((el,idx)=>parseInt(el,idx))")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回一个数组")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 元素分别求")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// parseInt(10.18,0)  => 10")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// parseInt(0,1)   => NaN  parseInt的进制范围是2～36， 1 不在该范围返回NaN")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// parseInt(14,2)  => 从左向右检测进制2，数字范围0～1，所以4没有，相当于1的2进制转化为10进制，1*2^0 = 1, 结果为1")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// parseInt(35,3)  => 因为3进制数字范围0~2, 3和5都不在这个范围，返回NaN")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// parseInt(23,4) => 2*4^1+3*4^0 = 11 ")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 结果为[10,NaN,1,NaN,11]")]),t._v("\n")])])]),a("p",[a("strong",[t._v("（2）转化为String类型的情况")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("使用String或者toString显式类型转换")]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("例子")]),t._v('：\nString(123)  结果为"123"\nString(true) 结果为"true"\nString(undefined)     结果为"undefined"\nString([])     结果为""\nString({})     结果为"[object Object]"    * 会调用原型上的toString()方法\n注意⚠️：\n123.toString() 会报错，因为会解析成（123.）toString()， 正确写法 (123).toString() 或者 123..toString 或者123 .toString')])])]),t._v(" "),a("li",[a("p",[t._v("使用➕号连接的时候，如果一边有字符串或者有对象(会先调用toString()解析为字符串)，那么会进行字符串的拼接")]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("例子")]),t._v('：\n1 + \'hello\'  结果为 "1hello"\n1 + []         结果为 "1"\n1 + {}         结果为"1[object Object]"\nNaN + {}    结果为 "NaN[object Object]"')])])])]),t._v(" "),a("p",[a("strong",[t._v("（3）转化为Boolean")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("Boolean 强制转化")]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("例子")]),t._v("：\nBoolean(null)、Boolean(0) 、Boolean(“”)、Boolean(NaN)、Boolean(undefined) 结果为false\n除上面五个，其他值转换都为true\nBoolean('haha') 、Boolean([]) 、 Boolean({}) 、Boolean(1) 结果为true")])])]),t._v(" "),a("li",[a("p",[t._v("!、!! 隐式转换")]),t._v(" "),a("blockquote",[a("p",[t._v("！ 结果为Boolean的相反\n!!   结果为Boolean的值\n"),a("strong",[t._v("例子")]),t._v('：\n! null 、!"" 、 !undefined 、!NaN、!0  结果为true\n!!  undefined  结果为false')])])])]),t._v(" "),a("p",[a("strong",[t._v("（4）“==”的隐式转化")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("两个 == 比较值，三个===号值和类型都比较")]),t._v(" "),a("blockquote",[a("p",[t._v("如果遇到对象会转换为字符串在比较\n例子\n[] == []   输出 false 对象比较对内存地址\nnull == undefined    输出true\n'123' == 123、'123' == [123] 、 '123' == ['123']  输出都是true")])])])]),t._v(" "),a("h2",{attrs:{id:"练习题-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#练习题-2"}},[t._v("#")]),t._v(" 练习题")]),t._v(" "),a("p",[t._v("​"),a("code",[t._v('js parseInt(""); // 输出NaN parseInt(null); // 输出NaN parseInt("12px") // 输出12 parseFloat("1.6px") + parseInt("1.2px") + typeof parseInt(null) // 输出\'2.6NaN\' 1.6 + 1 + typeof NaN Number("") // 输出0 Number(null) // 输出0 Number("12px") // 输出NaN Number(!!Number(parseInt("0.8"))) // 输出0 0.8 => 0 => 0 => false => 0 isNaN("") // 输出false "" => 0 =>false isNaN(null) // 输出false null => 0 => false isNaN("12px") // 输出true isNaN(Number(!!Number(parseInt("0.8")))) // 输出false isNaN(0) typeof !parseInt(null) + !isNaN(null) let a = typeof typeof typeof [12,23]; // \'string\' // 输出\'booleantrue\' // typeof !(NaN) + !(isNaN(Number(null))) // typeof true + !(isNaN(0)) => \'boolean\'+ true => \'booleantrue\' ​')])]),t._v(" "),a("p",[t._v("​```js\nlet result = 12+false+undefined+[]+'Test'+null+true+{};\nconsole.log(result);")]),t._v(" "),a("p",[t._v("// 12 + false => 12 + 0 => 12\n// 12 + undefined => 12 + NaN => NaN\n// NaN + [] => NaN + Number([]) => NaN + Number([].toString()) => NaN + Number('') => NaN\n// NaN+'Test' => 'NaNTest'\n// 'NaNTest'+null => 'NaNTestnull'\n// 'NaNTestnull'+true => 'NaNTestnulltrue'\n// 'NaNTestnulltrue'+ {} => 'NaNTestnulltrue'+ {}.toString() => 'NaNTestnulltrue[object Object]'\n​```")]),t._v(" "),a("p",[t._v("​"),a("code",[t._v("js let res = parseFloat('left:200px') //=> NaN if(res===200){ alert(200) }else if(res === NaN){ // => NaN === NaN false alert(NaN) }else if(typeof res === 'number'){ alert('number') //=> 'number' alert 输出结果都会转化为字符串 }else{ alert('Invalid Number') } ​")])]),t._v(" "),a("h2",{attrs:{id:"知识延伸"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#知识延伸"}},[t._v("#")]),t._v(" 知识延伸")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://juejin.im/post/5ee03947e51d457889262921?utm_source=gold_browser_extension#heading-40",target:"_blank",rel:"noopener noreferrer"}},[t._v("习题"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"写在最后"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#写在最后"}},[t._v("#")]),t._v(" 写在最后")]),t._v(" "),a("p",[t._v("欢迎访问我的博客"),a("a",{attrs:{href:"https://s2265681.github.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("rockshang.com"),a("OutboundLink")],1)]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("##   知识延伸\n[习题](https://juejin.im/post/5ee03947e51d457889262921?utm_source=gold_browser_extension#heading-40)\n\n\n\n##   写在最后\n欢迎访问我的博客[rockshang.com](https://s2265681.github.io/)\n\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);